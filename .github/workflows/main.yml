name: CI/CD for Flask App (Blue-Green Deployment)

on:
  push:
    branches:
      - main  # Trigger pipeline on push to main branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-attendance-app .
          docker push ${{ secrets.DOCKER_USERNAME }}/flask-attendance-app

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy to AWS EC2 (Blue-Green Deployment)
        run: |
          echo "${{ secrets.AWS_KEY }}" > private_key.pem
          chmod 600 private_key.pem

          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} << EOF

            # Ensure Docker network exists
            docker network create app_network || true

            # Ensure MySQL is running - starts once, doesn't restart on app deployment
            if ! docker ps --filter "name=mysql-db" | grep mysql-db; then
              docker run -d \
                --name mysql-db \
                --network app_network \
                -e MYSQL_ROOT_PASSWORD=root \
                -e MYSQL_DATABASE=attendance_db \
                -p 3306:3306 \
                mysql:latest

              echo "Waiting for MySQL to initialize..."
              sleep 30
            fi

            # Health check loop to make sure MySQL is fully up
            echo "Waiting for MySQL to become available..."
            until docker exec mysql-db mysqladmin ping -h "localhost" --silent; do
                echo "MySQL is not ready yet, retrying..."
                sleep 15
            done
            echo "MySQL is ready, up and running"

            # Determine current active and idle containers
            if docker ps --filter "name=flask-app-blue" | grep flask-app-blue; then
                ACTIVE_COLOR="blue"
                IDLE_COLOR="green"
                IDLE_PORT=5001
            elif docker ps --filter "name=flask-app-green" | grep flask-app-green; then
                ACTIVE_COLOR="green"
                IDLE_COLOR="blue"
                IDLE_PORT=5000
            else
                # First deployment case (default to blue)
                ACTIVE_COLOR="none"
                IDLE_COLOR="blue"
                IDLE_PORT=5000
            fi

            echo "Active Color: \$ACTIVE_COLOR"
            echo "Deploying to: \$IDLE_COLOR on port \$IDLE_PORT"

            # Authenticate and pull the new image
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/flask-attendance-app

            # Stop and remove the old idle container if it exists
            docker stop flask-app-\$IDLE_COLOR || true
            docker rm flask-app-\$IDLE_COLOR || true

            # Run new Flask app in idle slot
            docker run -d \
              --name flask-app-\$IDLE_COLOR \
              --network app_network \
              -p \$IDLE_PORT:5000 \
              -e DB_HOST=mysql-db \
              -e DB_USER=root \
              -e DB_PASSWORD=root \
              -e DB_NAME=attendance_db \
              ${{ secrets.DOCKER_USERNAME }}/flask-attendance-app

            echo "Successfully deployed to \$IDLE_COLOR"

            # Switch NGINX to new idle port
            echo "Updating NGINX to point to port $IDLE_PORT"
            sudo sed -i "s|localhost:[0-9]*|localhost:$IDLE_PORT|g" /etc/nginx/conf.d/bluegreen.conf
            sudo nginx -s reload


            echo "Traffic switched to \$IDLE_COLOR"

            # Optionally remove old active container (optional cleanup step, can be skipped for rollback flexibility)
            if [ "\$ACTIVE_COLOR" != "none" ]; then
                docker stop flask-app-\$ACTIVE_COLOR || true
                docker rm flask-app-\$ACTIVE_COLOR || true
                echo "Removed old \$ACTIVE_COLOR container"
            fi

          EOF
